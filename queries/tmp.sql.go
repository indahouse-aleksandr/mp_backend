// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.21.0
// source: tmp.sql

package queries

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllTMP = `-- name: GetAllTMP :many

SELECT id, title, created_at, is_deleted FROM tmp
`

func (q *Queries) GetAllTMP(ctx context.Context) ([]Tmp, error) {
	rows, err := q.db.Query(ctx, getAllTMP)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Tmp
	for rows.Next() {
		var i Tmp
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.CreatedAt,
			&i.IsDeleted,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTMP = `-- name: GetTMP :one

SELECT id, title, created_at, is_deleted FROM tmp WHERE id = $1
`

func (q *Queries) GetTMP(ctx context.Context, id pgtype.Int8) (Tmp, error) {
	row := q.db.QueryRow(ctx, getTMP, id)
	var i Tmp
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.CreatedAt,
		&i.IsDeleted,
	)
	return i, err
}

const getTMPCount = `-- name: GetTMPCount :one

SELECT COUNT(*) FROM tmp
`

func (q *Queries) GetTMPCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, getTMPCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}
